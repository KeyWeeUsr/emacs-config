# act -j compile --use-new-action-cache --action-offline-mode
# act -j test --use-new-action-cache --action-offline-mode

# todo(artifacts): ~/.emacs.d/elpa,elpaca; chown -R 1000:1000, tgz, sign
name: CI

on:
  push:
    paths-ignore: ['**.md']
  pull_request:
    paths-ignore: ['**.md']

jobs:
  compile:
    needs: prebuild
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
        emacs: [
          # note(elpaca): Emacs >= 27.1
          '27.1',
          '27.2',
          '28.1',
          '28.2',
          # built-in use-package
          '29.1',
          '29.2',
          '29.3',
          '29.4',
          '30.1',
          # 'master'
        ]

    container:
      image: keyweeusr/emacs-with-node:${{ matrix.emacs }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out the source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache use-package
        if: |
          startsWith(matrix.emacs, '28.')
          || startsWith(matrix.emacs, '27.')
        id: cache-use-package
        uses: actions/cache@v4
        with:
          path: |
            ~/.emacs.d/elpa/bind-key-*
            ~/.emacs.d/elpa/use-package-*
          key: >-
            os-${{ matrix.os }}
            emacs-${{ matrix.emacs }}
            use-package

      - name: Pre-install use-package for older versions
        if: |
          (startsWith(matrix.emacs, '28.') || startsWith(matrix.emacs, '27.'))
          && steps.cache-use-package.outputs.cache-hit != 'true'
        run: |
          emacs --batch \
              --directory . \
              --eval "$(cat<<EOF
              (progn
                (package-refresh-contents) (package-install 'use-package)
              )
          EOF
          )"

      - name: Ensure clean byte-compilation
        run: |
          echo -n "${{ matrix.emacs}}" \
          | grep -e "28." -e "27." \
          && ls -lah ~/.emacs.d/elpa/ \
          || true

          echo -n "${{ matrix.emacs}}" \
          | grep -e "28." -e "27." \
          && mkdir -p ~/.emacs.d/elpaca/repos \
          && ln -s ~/.emacs.d/elpa/use-package-*/ \
              ~/.emacs.d/elpaca/repos/use-package \
          && ln -s ~/.emacs.d/elpa/bind-key-*/ \
              ~/.emacs.d/elpaca/repos/bind-key \
          && ls -lah ~/.emacs.d/elpaca/repos

          echo '(setq byte-compile-error-on-warn t)' > error-on-warn
          emacs --batch \
              --directory . \
              --load error-on-warn \
              --eval '(unless (byte-compile-file ".emacs") (kill-emacs 1))'

  prebuild:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
        emacs: [
          # note(elpaca): Emacs >= 27.1
          '27.1',
          '27.2',
          '28.1',
          '28.2',
          # built-in use-package
          '29.1',
          '29.2',
          '29.3',
          '29.4',
          '30.1',
          # 'master'
        ]

    container:
      image: docker:dind
    steps:
      - run: |
          # note: act & local registry
          docker images --filter \
              'reference=keyweeusr/emacs-with-node:${{ matrix.emacs }}' \
              | sed 1d \
              | read \
              && exit 0

          # note: check if prebuilt already
          docker pull keyweeusr/emacs-with-node:${{ matrix.emacs }} \
          && exit 0 \
          || true

          # note: patch & push
          docker run --name tmp -i silex/emacs:${{ matrix.emacs }} sh -c '
          apt update
          apt install -y nodejs git \
              --no-install-recommends \
              --no-install-suggests
          '
          docker commit tmp keyweeusr/emacs-with-node:${{ matrix.emacs }}
          docker rm -f tmp
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password "${{ secrets.DOCKER_TOKEN }}"
          docker push keyweeusr/emacs-with-node:${{ matrix.emacs }}
          docker logout

  test:
    needs: prebuild
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
        emacs: [
          # note(elpaca): Emacs >= 27.1
          '27.1',
          '27.2',
          '28.1',
          '28.2',
          # built-in use-package
          '29.1',
          '29.2',
          '29.3',
          '29.4',
          '30.1',
          # 'master'
        ]
        ecukes:
          - 0.6.18

    container:
      image: keyweeusr/emacs-with-node:${{ matrix.emacs }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Check out the source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache Ecukes
        id: cache-ecukes
        uses: actions/cache@v4
        with:
          path: |
            ~/.emacs.d/elpa/ecukes-0.6.18
            ~/.emacs.d/elpa/f-0.21.0
            ~/.emacs.d/elpa/s-1.13.0
            ~/.emacs.d/elpa/dash-2.20.0
            ~/.emacs.d/elpa/ansi-0.4.1
            ~/.emacs.d/elpa/espuds-0.3.3
            ~/.emacs.d/elpa/commander-0.7.0
          key: >-
            os-${{ matrix.os }}
            emacs-${{ matrix.emacs }}
            ecukes-${{ matrix.ecukes }}

      - name: Install Ecukes
        if: steps.cache-ecukes.outputs.cache-hit != 'true'
        run: |-
          set -e
          time emacs --batch \
              --directory . \
              --eval "$(cat<<EOF
              (progn
                (require 'package)
                (add-to-list
                 'package-archives
                 '("stable-melpa" . "https://stable.melpa.org/packages/") t)
                (package-initialize)
                (package-refresh-contents)
                (package-list-packages)
                (package-install 'ecukes)
              )
          EOF
          )"

      - name: Ensure Ecukes
        run: |-
          time emacs --batch \
              --directory . \
              --eval "$(cat<<EOF
              (progn
                (package-initialize)
                (require 'ecukes)
                (ecukes-load))
          EOF
          )"
          ls -lah ~/.emacs.d/elpa* || true

      # note: the initial boot relies on too many moving parts
      #       therefore, many retries for failed packages and cache
      #       and test the behavior afterwards (encourages me to lock too)
      - name: Purge cache if Elpaca installer changes
        id: elpaca-installer
        run: |
          echo "hash=$( \
          sed -n '/note(elpaca-install,begin)/,/note(elpaca-install,end)/p' \
          .emacs | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache Elpaca bootstrap
        id: cache-elpaca
        uses: actions/cache@v4
        with:
          path: |
            ~/.emacs.d
          key: >-
            os-${{ matrix.os }}
            emacs-${{ matrix.emacs }}
            elpaca-${{ hashFiles('.emacs.elpaca.lock') }}
            installer-${{ steps.elpaca-installer.outputs.hash }}

      - name: Run installation behavior test
        if: steps.cache-elpaca.outputs.cache-hit != 'true'
        env:
          # curl -s https://www.gnu.org/software/emacs/history.html \
          #   | grep -m1 -Po 'Emacs \K\d+\.\d+(?= released)'
          EMACS_LATEST: 30.1
        run: |-
          emacs --batch \
              --directory . \
              --eval "$(cat<<EOF
              (progn
                (require 'package)
                (package-initialize)
                (require 'f)
                (require 'ecukes)
                (add-hook 'ecukes-reporter-steps-without-definition-hook
                          (lambda (steps)
                            (ignore steps)
                            (error "Missing implementations: %S" steps)))

                (add-hook 'ecukes-reporter-scenario-failed-hook
                          (lambda (scenario)
                            (message "scenario failed: %S" scenario)))
                (ecukes-load)
                (ecukes-reporter-use ecukes-cli-reporter)

                (message "Running install.feature")
                (ecukes-run (f-glob "install.feature"
                                    (ecukes-project-features-path)))
                (when (> (+ ecukes-stats-steps-failed
                            ecukes-stats-scenarios-failed)
                         0)
                  (error "Install test failed"))
              )
          EOF
          )" || (ls -lah ~/.emacs.d/elpaca/repos*;exit 1)
          ls -lah ~/.emacs.d/elpaca/repos

      - name: Run behavior tests
        run: |-
          ls -lah ~/.emacs.d/elpa*
          ls -lah ~/.emacs.d/elpaca/repos
          emacs --batch \
              --directory . \
              --eval "$(cat<<EOF
              (progn
                (load ".emacs")
                (require 'elpaca)
                ;; note: sets up the load-path
                (elpaca elpaca-use-package (elpaca-use-package-mode))
                (require 'f)
                (require 'ecukes)

                (add-hook 'ecukes-reporter-steps-without-definition-hook
                          (lambda (steps)
                            (ignore steps)
                            (error "Missing implementations: %S" steps)))

                (add-hook 'ecukes-reporter-scenario-failed-hook
                          (lambda (scenario)
                            (message "scenario failed: %S" scenario)))

                (let ((features
                       (f-glob "*.feature" (ecukes-project-features-path)))
                      ;; note: C-set "noninteractive" blocks some functionality
                      ;;       so exclude tests relying on it
                      (ecukes-exclude-tags '("interactive-only")))
                  (when features
                    (setq features
                          (delete (car (f-glob "install.feature"
                                               (ecukes-project-features-path)))
                                  features))
                    (message "Running feature files:")
                    (dolist (row features)
                      (message "* %s" row)))

                  (ecukes-load)
                  (ecukes-reporter-use ecukes-cli-reporter)

                  (ecukes-run features)

                  (when (> (+ ecukes-stats-steps-failed
                              ecukes-stats-scenarios-failed)
                           0)
                    (error "Tests failed"))
                )
              )
          EOF
          )"
